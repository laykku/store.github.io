@tlu

cull on
ztest on
depthtest on
depthfunc less
depthmask on

-- lightpos light_pos

@vert

    #version 300 es

    precision mediump float;

    layout(location = 0) in vec3 aPos;
    layout(location = 1) in vec3 aNormal;
    layout(location = 2) in vec2 aTexCoord;

    out vec3 FragPos;
    out vec3 Normal;
    out vec2 TexCoord;

    uniform mat4 model;
    uniform mat4 view;
    uniform mat4 projection;
    uniform vec3 model_pos_lo;
    uniform vec3 model_pos_hi;
    uniform vec3 view_pos_lo;
    uniform vec3 view_pos_hi;

    void main()
    {
        TexCoord = aTexCoord;

        mat4 modelRotScale = model;
        modelRotScale[3] = vec4(0.0, 0.0, 0.0, 1.0);

        mat4 viewRotScale = view;
        viewRotScale[3] = vec4(0.0, 0.0, 0.0, 1.0);

        Normal = mat3(transpose(inverse(modelRotScale))) * aNormal;
        FragPos = vec3(modelRotScale * vec4(aPos, 1.0));

        vec3 hp = model_pos_hi - view_pos_hi;
        vec3 lp = model_pos_lo - view_pos_lo;
        vec3 p = FragPos + hp + lp;

        gl_Position = projection * viewRotScale * vec4(p, 1.0);
    }

@frag

    #version 300 es

    precision mediump float;

    out vec4 FragColor;

    #inc material.glsl
    #inc lighting.glsl

    #define MAX_POINT_LIGHTS 8
    #define MAX_SPOT_LIGHTS 4

    in vec3 FragPos;
    in vec3 Normal;
    in vec2 TexCoord;

    uniform DirLight dirLight;
    uniform PointLight pointLights[MAX_POINT_LIGHTS];
    uniform SpotLight spotLights[MAX_SPOT_LIGHTS];
    uniform Material material;
    uniform vec3 model_pos_lo;
    uniform vec3 model_pos_hi;
    uniform vec3 view_pos_lo;
    uniform vec3 view_pos_hi;
    uniform int point_light_count;
    uniform int spot_light_count;
    
    vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
    vec3 CalPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
    vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

    uniform vec3 light_ambient;
    uniform samplerCube env;

    void main()
    {
        vec3 hp = view_pos_hi - model_pos_hi;
        vec3 lp = view_pos_lo - model_pos_lo;
        vec3 p = hp + lp;

        vec3 viewPos = p;
        vec3 viewDir = normalize(viewPos - FragPos);

        vec3 norm = normalize(Normal);

        vec3 result = CalcDirLight(dirLight, norm, viewDir);

        for (int i = 0; i < point_light_count; ++i) {
            result += CalPointLight(pointLights[i], norm, FragPos, viewDir);
        }

        for (int i = 0; i < spot_light_count; ++i) {
            result += CalcSpotLight(spotLights[i], norm, FragPos, viewDir);
        }

        vec3 I = normalize(FragPos - viewPos);
        vec3 R = reflect(I, norm);
        vec3 reflection = texture(env, R).rgb;

        vec3 reflection_intensity = texture(material.specular, TexCoord).rgb;

        result += reflection * reflection_intensity;

        FragColor = vec4(result, 1.0);
    }

    vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
    {
        vec3 lightDir = normalize(-light.direction);

        float diff = max(dot(normal, lightDir), 0.0);

        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

        vec3 ambient = light_ambient * vec3(texture(material.diffuse, TexCoord));
        vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
        vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));
        
        return (ambient + diffuse + specular);
    }
    
    vec3 CalPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
    {
        vec3 hp = light.position_high - model_pos_hi;
        vec3 lp = light.position_low - model_pos_lo;
        vec3 p = hp + lp;

        vec3 lightDir = normalize(p - fragPos);

        float diff = max(dot(normal, lightDir), 0.0);

        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

        float distance = length(p - fragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

        vec3 ambient = light_ambient * vec3(texture(material.diffuse, TexCoord));
        vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
        vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));
        ambient *= attenuation;
        diffuse *= attenuation;
        specular *= attenuation;

        return (ambient + diffuse + specular);
    }

    vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
    {
        vec3 hp = light.position_high - model_pos_hi;
        vec3 lp = light.position_low - model_pos_lo;
        vec3 p = hp + lp;

        vec3 lightDir = normalize(p - fragPos);

        float diff = max(dot(normal, lightDir), 0.0);

        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

        float distance = length(p - fragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

        float theta = dot(lightDir, normalize(-light.direction));
        float epsilon = light.cutOff - light.outerCutOff;
        float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

        vec3 ambient = light_ambient * vec3(texture(material.diffuse, TexCoord));
        vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
        vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));
        ambient *= attenuation * intensity;
        diffuse *= attenuation * intensity;
        specular *= attenuation * intensity;

        return (ambient + diffuse + specular);
    }